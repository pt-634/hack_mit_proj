{"ast":null,"code":"'use strict';\n\n// File generated from our OpenAPI spec by Stainless.\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.Translations = void 0;\nconst resource_1 = require('openai/resource');\nconst core_1 = require('openai/core');\nclass Translations extends resource_1.APIResource {\n  /**\n   * Translates audio into English.\n   */\n  create(body, options) {\n    return this.post('/audio/translations', (0, core_1.multipartFormRequestOptions)({\n      body,\n      ...options\n    }));\n  }\n}\nexports.Translations = Translations;\n(function (Translations) {})(Translations = exports.Translations || (exports.Translations = {}));","map":{"version":3,"names":["resource_1","require","core_1","Translations","APIResource","create","body","options","post","multipartFormRequestOptions","exports"],"sources":["C:\\Users\\seanm\\Desktop\\hackmit\\node_modules\\openai\\src\\resources\\audio\\translations.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from '../../core';\nimport { APIResource } from '../../resource';\nimport * as API from './index';\nimport { type Uploadable, multipartFormRequestOptions } from '../../core';\n\nexport class Translations extends APIResource {\n  /**\n   * Translates audio into English.\n   */\n  create(body: TranslationCreateParams, options?: Core.RequestOptions): Core.APIPromise<Translation> {\n    return this.post('/audio/translations', multipartFormRequestOptions({ body, ...options }));\n  }\n}\n\nexport interface Translation {\n  text: string;\n}\n\nexport interface TranslationCreateParams {\n  /**\n   * The audio file object (not file name) translate, in one of these formats: flac,\n   * mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n   */\n  file: Uploadable;\n\n  /**\n   * ID of the model to use. Only `whisper-1` is currently available.\n   */\n  model: (string & {}) | 'whisper-1';\n\n  /**\n   * An optional text to guide the model's style or continue a previous audio\n   * segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in\n   * English.\n   */\n  prompt?: string;\n\n  /**\n   * The format of the transcript output, in one of these options: json, text, srt,\n   * verbose_json, or vtt.\n   */\n  response_format?: string;\n\n  /**\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n   * output more random, while lower values like 0.2 will make it more focused and\n   * deterministic. If set to 0, the model will use\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n   * automatically increase the temperature until certain thresholds are hit.\n   */\n  temperature?: number;\n}\n\nexport namespace Translations {\n  export import Translation = API.Translation;\n  export import TranslationCreateParams = API.TranslationCreateParams;\n}\n"],"mappings":";;AAAA;;;;;AAGA,MAAAA,UAAA,GAAAC,OAAA;AAEA,MAAAC,MAAA,GAAAD,OAAA;AAEA,MAAaE,YAAa,SAAQH,UAAA,CAAAI,WAAW;;;;QAI3CC,CAAAC,IAAO,EAA6BC,OAAE,EAA6B;WACjE,IAAO,CAAAC,IAAK,sBAAK,IAAqB,EAAEN,MAAA,CAAAO,2BAAA;MAA2BH,IAAG;MAAA,GAAIC;IAAK,GAAO;;;AAL1FG,OAAA,CAAAP,YAAA,GAAAA,YAAA;AAgDA,WAAiBA,YAAY,MAAAA,YAAA,GAAAO,OAAA,CAAAP,YAAA,KAAAO,OAAA,CAAAP,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}