{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { Configuration, OpenAIApi } from 'openai';\nfunction Gpt_API({\n  total_qs,\n  grade_level\n}) {\n  _s();\n  useEffect(() => {\n    const organization = 'org-VGR2dle1CU3LgxyBwlcPHtLp';\n    const apiKey = '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';\n    const configuration = new Configuration({\n      apiKey: apiKey\n    });\n    const openai = new OpenAIApi(configuration);\n    async function main() {\n      const grade_level = 10;\n      const num_qs = 5;\n      const total_qs = 2 * (num_qs + 1);\n      const content = `${total_qs} math questions for a ${grade_level}th grader. Give a single numeric answer to each question. \\\n        Return each question with its corresponding answer. Label each question with 'Question 1', 'Question 2', and so on. \\\n        The answers should each be a single numeric value without units.`;\n      try {\n        const completion = await openai.chat.create({\n          messages: [{\n            role: 'system',\n            content: content\n          }],\n          model: 'gpt-3.5-turbo'\n        });\n        console.log(completion.data.choices[0].message.content);\n      } catch (error) {\n        console.error('OpenAI API error:', error);\n      }\n    }\n    const reply_content = completion.choices[0].message.content;\n    const question_and_answer = reply_content.split(\"\\n\");\n    let on_question = true;\n    const questions = [];\n    const answers = [];\n    for (const element of question_and_answer) {\n      if (!element || ![\"Q\", \"A\"].includes(element[0])) {\n        continue;\n      }\n      const colon_index = element.indexOf(\":\");\n      const trimmed_element = element.slice(colon_index + 1).trim();\n      if (on_question) {\n        questions.push(trimmed_element);\n        on_question = false;\n      } else {\n        answers.push(trimmed_element);\n        on_question = true;\n      }\n    }\n    const problems = {};\n    for (let i = 0; i < questions.length; i++) {\n      problems[i] = [questions[i], answers[i]];\n    }\n    main();\n  }, []); // Empty dependency array ensures this effect runs only once on component mount\n\n  return problems;\n}\n_s(Gpt_API, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Gpt_API;\nexport default Gpt_API;\nvar _c;\n$RefreshReg$(_c, \"Gpt_API\");","map":{"version":3,"names":["useEffect","Configuration","OpenAIApi","Gpt_API","total_qs","grade_level","_s","organization","apiKey","configuration","openai","main","num_qs","content","completion","chat","create","messages","role","model","console","log","data","choices","message","error","reply_content","question_and_answer","split","on_question","questions","answers","element","includes","colon_index","indexOf","trimmed_element","slice","trim","push","problems","i","length","_c","$RefreshReg$"],"sources":["C:/Users/seanm/Desktop/hackmit/src/components/Gpt_API.js"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { Configuration, OpenAIApi } from 'openai';\r\n\r\nfunction Gpt_API({total_qs,grade_level}) {\r\n  useEffect(() => {\r\n    const organization = 'org-VGR2dle1CU3LgxyBwlcPHtLp';\r\n    const apiKey = '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';\r\n\r\n    const configuration = new Configuration({\r\n      apiKey: apiKey,\r\n    });\r\n\r\n    const openai = new OpenAIApi(configuration);\r\n\r\n    async function main() {\r\n      const grade_level = 10;\r\n      const num_qs = 5;\r\n      const total_qs = 2 * (num_qs + 1);\r\n      const content = `${total_qs} math questions for a ${grade_level}th grader. Give a single numeric answer to each question. \\\r\n        Return each question with its corresponding answer. Label each question with 'Question 1', 'Question 2', and so on. \\\r\n        The answers should each be a single numeric value without units.`;\r\n\r\n      try {\r\n        const completion = await openai.chat.create({\r\n          messages: [{ role: 'system', content: content }],\r\n          model: 'gpt-3.5-turbo',\r\n        });\r\n\r\n        console.log(completion.data.choices[0].message.content);\r\n      } catch (error) {\r\n        console.error('OpenAI API error:', error);\r\n      }\r\n    }\r\n\r\n    const reply_content = completion.choices[0].message.content;\r\n\r\n    const question_and_answer = reply_content.split(\"\\n\");\r\n    let on_question = true;\r\n    const questions = [];\r\n    const answers = [];\r\n\r\n    for (const element of question_and_answer) {\r\n    if (!element || ![\"Q\", \"A\"].includes(element[0])) {\r\n        continue;\r\n    }\r\n    const colon_index = element.indexOf(\":\");\r\n    const trimmed_element = element.slice(colon_index + 1).trim();\r\n    if (on_question) {\r\n        questions.push(trimmed_element);\r\n        on_question = false;\r\n    } else {\r\n        answers.push(trimmed_element);\r\n        on_question = true;\r\n    }\r\n    }\r\n\r\n    const problems = {};\r\n\r\n    for (let i = 0; i < questions.length; i++) {\r\n    problems[i] = [questions[i],answers[i]];\r\n    }\r\n\r\n\r\n    main();\r\n  }, []); // Empty dependency array ensures this effect runs only once on component mount\r\n\r\n  return (\r\n    problems\r\n  );\r\n}\r\n\r\nexport default Gpt_API;"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AAEjD,SAASC,OAAOA,CAAC;EAACC,QAAQ;EAACC;AAAW,CAAC,EAAE;EAAAC,EAAA;EACvCN,SAAS,CAAC,MAAM;IACd,MAAMO,YAAY,GAAG,8BAA8B;IACnD,MAAMC,MAAM,GAAG,qDAAqD;IAEpE,MAAMC,aAAa,GAAG,IAAIR,aAAa,CAAC;MACtCO,MAAM,EAAEA;IACV,CAAC,CAAC;IAEF,MAAME,MAAM,GAAG,IAAIR,SAAS,CAACO,aAAa,CAAC;IAE3C,eAAeE,IAAIA,CAAA,EAAG;MACpB,MAAMN,WAAW,GAAG,EAAE;MACtB,MAAMO,MAAM,GAAG,CAAC;MAChB,MAAMR,QAAQ,GAAG,CAAC,IAAIQ,MAAM,GAAG,CAAC,CAAC;MACjC,MAAMC,OAAO,GAAI,GAAET,QAAS,yBAAwBC,WAAY;AACtE;AACA,yEAAyE;MAEnE,IAAI;QACF,MAAMS,UAAU,GAAG,MAAMJ,MAAM,CAACK,IAAI,CAACC,MAAM,CAAC;UAC1CC,QAAQ,EAAE,CAAC;YAAEC,IAAI,EAAE,QAAQ;YAAEL,OAAO,EAAEA;UAAQ,CAAC,CAAC;UAChDM,KAAK,EAAE;QACT,CAAC,CAAC;QAEFC,OAAO,CAACC,GAAG,CAACP,UAAU,CAACQ,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACX,OAAO,CAAC;MACzD,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MAC3C;IACF;IAEA,MAAMC,aAAa,GAAGZ,UAAU,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACX,OAAO;IAE3D,MAAMc,mBAAmB,GAAGD,aAAa,CAACE,KAAK,CAAC,IAAI,CAAC;IACrD,IAAIC,WAAW,GAAG,IAAI;IACtB,MAAMC,SAAS,GAAG,EAAE;IACpB,MAAMC,OAAO,GAAG,EAAE;IAElB,KAAK,MAAMC,OAAO,IAAIL,mBAAmB,EAAE;MAC3C,IAAI,CAACK,OAAO,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,QAAQ,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;QAC9C;MACJ;MACA,MAAME,WAAW,GAAGF,OAAO,CAACG,OAAO,CAAC,GAAG,CAAC;MACxC,MAAMC,eAAe,GAAGJ,OAAO,CAACK,KAAK,CAACH,WAAW,GAAG,CAAC,CAAC,CAACI,IAAI,CAAC,CAAC;MAC7D,IAAIT,WAAW,EAAE;QACbC,SAAS,CAACS,IAAI,CAACH,eAAe,CAAC;QAC/BP,WAAW,GAAG,KAAK;MACvB,CAAC,MAAM;QACHE,OAAO,CAACQ,IAAI,CAACH,eAAe,CAAC;QAC7BP,WAAW,GAAG,IAAI;MACtB;IACA;IAEA,MAAMW,QAAQ,GAAG,CAAC,CAAC;IAEnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,SAAS,CAACY,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3CD,QAAQ,CAACC,CAAC,CAAC,GAAG,CAACX,SAAS,CAACW,CAAC,CAAC,EAACV,OAAO,CAACU,CAAC,CAAC,CAAC;IACvC;IAGA9B,IAAI,CAAC,CAAC;EACR,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,OACE6B,QAAQ;AAEZ;AAAClC,EAAA,CAlEQH,OAAO;AAAAwC,EAAA,GAAPxC,OAAO;AAoEhB,eAAeA,OAAO;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}